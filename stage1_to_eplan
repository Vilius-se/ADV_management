import streamlit as st
import pandas as pd
import math
from io import BytesIO
import time
from processing import (
    stage1_pipeline_1, stage1_pipeline_2, stage1_pipeline_3, stage1_pipeline_4,
    stage1_pipeline_5, stage1_pipeline_6, stage1_pipeline_7, stage1_pipeline_7_1,
    stage1_pipeline_8, stage1_pipeline_9, stage1_pipeline_10, stage1_pipeline_11,
    stage1_pipeline_12, stage1_pipeline_14, stage1_pipeline_15, stage1_pipeline_16,
    stage1_pipeline_17, stage1_pipeline_18, stage1_pipeline_19, stage1_pipeline_20,
    stage1_pipeline_21, stage1_pipeline_22, stage1_pipeline_23, stage1_pipeline_24,
    stage1_pipeline_25, parse_component_functions, identify_blank_cells
)

def render():
    st.header("Stage 1: Convert for EPLAN")

    uploaded_file = st.file_uploader("📁 Upload main Excel file", type=["xlsx", "xls"], key="main_excel")
    uploaded_advws = st.file_uploader("📥 Upload ADV_WS_functions file", type=["xlsx", "xls"], key="advws_excel")

    if uploaded_file and uploaded_advws:
        df = pd.read_excel(uploaded_file)
        df_component = pd.read_excel(uploaded_advws)
        group_symbols = parse_component_functions(df_component)

        st.success("✅ Both files uploaded. Ready for processing!")

        if st.button("🚀 RUN EPLAN TRANSFORMATION", type="primary"):
            progress_text = st.empty()
            progress_bar = st.progress(0)

            steps = [
                stage1_pipeline_1, stage1_pipeline_2, stage1_pipeline_3, stage1_pipeline_4,
                stage1_pipeline_5, stage1_pipeline_6, stage1_pipeline_7, stage1_pipeline_8,
                stage1_pipeline_9, stage1_pipeline_16, stage1_pipeline_7_1, stage1_pipeline_10,
                stage1_pipeline_11, stage1_pipeline_14, stage1_pipeline_15, stage1_pipeline_17,
                stage1_pipeline_18, stage1_pipeline_19, stage1_pipeline_20, stage1_pipeline_21,
                stage1_pipeline_22, stage1_pipeline_23, stage1_pipeline_24, stage1_pipeline_25,
                stage1_pipeline_12
            ]

            df_stage1 = df.copy()
            total_steps = len(steps)
            for i, pipeline_func in enumerate(steps, start=1):
                step_name = pipeline_func.__name__.replace("stage1_", "").replace("_", " ").title()
                progress_text.markdown(
                    f"<div style='text-align:center; color:#00d4aa;'>"
                    f"⚙️ Processing step {i}/{total_steps}: <b>{step_name}</b></div>",
                    unsafe_allow_html=True
                )
                try:
                    if pipeline_func.__name__ == "stage1_pipeline_10":
                        df_stage1 = pipeline_func(df_stage1, group_symbols)
                    elif pipeline_func.__name__ == "stage1_pipeline_1":
                        df_stage1, _ = pipeline_func(df_stage1)
                    else:
                        df_stage1 = pipeline_func(df_stage1)
                except Exception as e:
                    st.error(f"❌ Error at step {i} ({step_name}): {e}")
                    st.stop()

                progress_bar.progress(i / total_steps)
                time.sleep(0.2)  # short smooth animation delay

            progress_text.empty()
            progress_bar.empty()

            st.success("✅ EPLAN Transformation complete!")

            # Preview table
            st.markdown("### 🔍 Preview of Processed Data")
            st.dataframe(df_stage1.head(20), use_container_width=True, height=400)

            # Download file
            buf = BytesIO()
            df_stage1.to_excel(buf, index=False)
            base = uploaded_file.name[:8]
            st.download_button(
                "📥 Download EPLAN Output",
                buf.getvalue(),
                file_name=f"{base}_ADV_EPLAN_IMPORT.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    else:
        st.info("📎 Please upload both Excel files to start the process.")
